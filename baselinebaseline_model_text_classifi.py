{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbb2298c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#swaroop\n",
    "#rootVersion\n",
    "\n",
    "#download helper functions\n",
    "!wget helper_functions.py\n",
    "\n",
    "#import functions\n",
    "from helper_functions import unzip_data,create_tensorboard_callback,plot_loss_curves,compare_historys\n",
    "\n",
    "#download dataset\n",
    "!wget \"nlp_getting_started.zip\"\n",
    "unzip_data(\"nlp_getting_started.zip\")\n",
    "\n",
    "#read csv file\n",
    "import pandas as pd\n",
    "train_df = pd.read_csv(\"train.csv\")\n",
    "test_df = pd.read_csv(\"test.csv\")\n",
    "train_df.head()\n",
    "\n",
    "train_df_shuffeled = train_df.sample(frac=1,random_state=42)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "# Use train_test_split to split training data into training and validation sets\n",
    "train_sentence, val_sentence, train_labels, val_labels = train_test_split(train_df_shuffeled[\"text\"].to_numpy(),\n",
    "                                                                          train_df_shuffeled[\"target\"].to_numpy(),\n",
    "                                                                          test_size=0.1,\n",
    "                                                                          random_state=42)\n",
    "\n",
    "#Convert Text into Numbers\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n",
    "\n",
    "#find average number of tokens\n",
    "round(sum([len(i.split()) for i in train_sentence])/len(train_sentence))\n",
    "\n",
    "# Setup text vectorization variables\n",
    "max_vocab_length = 10000\n",
    "max_length = 15\n",
    "text_vectorizer = TextVectorization(max_tokens=max_vocab_length,\n",
    "                                    output_mode=\"int\",\n",
    "                                    output_sequence_length=max_length)\n",
    "text_vectorizer.adapt(train_sentence)\n",
    "\n",
    "#Creating an Embedding using an Embedding Layer\n",
    "from tensorflow.keras import layers\n",
    "embedding = layers.Embedding(input_dim=max_vocab_length,\n",
    "                             output_dim=128,\n",
    "                             input_length=max_length)\n",
    "embedding\n",
    "\n",
    "#Model0 - Baseline Model Multinominal Naive Bayes\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.pipeline import Pipeline\n",
    "model0 = Pipeline([\n",
    "                   (\"tfidf\", TfidfVectorizer()),\n",
    "                   (\"clf\", MultinomialNB())\n",
    "])\n",
    "model0.fit(train_sentence,train_labels)\n",
    "\n",
    "#score\n",
    "baseline_score = model0.score(val_sentence,val_labels)\n",
    "baseline_score*100\n",
    "\n",
    "#predictions\n",
    "baseline_preds = model0.predict(val_sentence)\n",
    "baseline_preds[:20]\n",
    "\n",
    "#Calculate Function\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support\n",
    "\n",
    "def calculate_result(y_true, y_pred):\n",
    "  model_accuracy = accuracy_score(y_true, y_pred)*100\n",
    "  model_precision, model_recall, model_f1, _ = precision_recall_fscore_support(y_true,y_pred,average=\"weighted\")\n",
    "  model_results = {\"accuracy\":model_accuracy,\n",
    "                   \"precision\":model_precision,\n",
    "                   \"recall\": model_recall,\n",
    "                   \"f1\": model_f1}\n",
    "  return model_results\n",
    "\n",
    "baseline_results = calculate_result(y_true=val_labels,\n",
    "                                    y_pred = baseline_preds)\n",
    "baseline_results"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
